
const { merge } = require('webpack-merge');
const base = require('./base');
const helpers = require('./helpers');

module.exports = merge(base, {
  mode: 'production',
  output: {
    path: helpers.resolveFromRootPath('dist'),
    filename: './js/[name].[chunkhash].js',
    assetModuleFilename: './images/[hash][ext][query]',
  },
});


*********************************

const { merge } = require('webpack-merge');
const base = require('./base');
const helpers = require('./helpers');

module.exports = merge(base, {
  mode: 'production',
  output: {
    path: helpers.resolveFromRootPath('dist'),
    filename: './js/[name].[chunkhash].js',
    assetModuleFilename: './images/[hash][ext][query]',
  },
  optimization: {
    runtimeChunk: 'single',
    splitChunks: {
      cacheGroups: {
        vendor: {
          chunks: 'all',
          name: 'vendor',
          test: /[\\/]node_modules[\\/]/,
          enforce: true,
        },
      },
    },
  },
});


*********************************

prod.env

*********************************

NODE_ENV=production
ORGANIZATION=facebook


*********************************

const { merge } = require('webpack-merge');
const Dotenv = require('dotenv-webpack');
const base = require('./base');
const helpers = require('./helpers');

module.exports = merge(base, {
  mode: 'production',
  output: {
    path: helpers.resolveFromRootPath('dist'),
    filename: './js/[name].[chunkhash].js',
    assetModuleFilename: './images/[hash][ext][query]',
  },
  optimization: {
    runtimeChunk: 'single',
    splitChunks: {
      cacheGroups: {
        vendor: {
          chunks: 'all',
          name: 'vendor',
          test: /[\\/]node_modules[\\/]/,
          enforce: true,
        },
      },
    },
  },
  plugins: [
    new Dotenv({
      path: 'prod.env',
    }),
  ],
});


*********************************

{
  "name": "04-boilerplate-front",
  "version": "1.0.0",
  "description": "Member project",
  "main": "index.js",
  "scripts": {
    "start": "run-p -l type-check:watch start:dev",
    "start:dev": "webpack serve --config ./config/webpack/dev.js",
    "type-check": "tsc --noEmit",
    "type-check:watch": "npm run type-check -- --watch",
    "clean": "rimraf dist",
    "test": "jest -c ./config/test/jest.js --verbose",
    "test:watch": "npm run test -- --watchAll -i --no-cache",
    "build": "npm run type-check && npm run clean && npm run build:prod",
    "build:prod": "webpack --config ./config/webpack/prod.js"
  },
  "author": "Lemoncode",
  "license": "MIT",
  "dependencies": {
    "@emotion/css": "^11.7.1",
    "@emotion/react": "^11.8.1",
    "@emotion/styled": "^11.8.1",
    "@lemoncode/fonk": "^1.5.1",
    "@lemoncode/fonk-formik": "^4.0.1",
    "@mui/material": "^5.4.4",
    "axios": "^0.26.0",
    "formik": "^2.2.9",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-router-dom": "^6.2.2",
    "regenerator-runtime": "^0.13.9"
  },
  "devDependencies": {
    "@babel/cli": "^7.17.6",
    "@babel/core": "^7.17.5",
    "@babel/preset-env": "^7.16.11",
    "@babel/preset-react": "^7.16.7",
    "@babel/preset-typescript": "^7.16.7",
    "@emotion/babel-plugin": "^11.7.2",
    "@testing-library/dom": "^8.11.3",
    "@testing-library/jest-dom": "^5.16.2",
    "@testing-library/react": "^12.1.3",
    "@testing-library/react-hooks": "^7.0.2",
    "@testing-library/user-event": "^13.5.0",
    "@types/jest": "^27.4.1",
    "@types/react": "^17.0.39",
    "@types/react-dom": "^17.0.13",
    "@types/react-router-dom": "^5.3.3",
    "babel-loader": "^8.2.3",
    "dotenv-webpack": "^7.1.0",
    "html-webpack-plugin": "^5.5.0",
    "jest": "^27.5.1",
    "npm-run-all": "^4.1.5",
    "react-test-renderer": "^17.0.2",
    "rimraf": "^3.0.2",
    "ts-jest": "^27.1.3",
    "typescript": "^4.6.2",
    "url-loader": "^4.1.1",
    "webpack": "^5.70.0",
    "webpack-cli": "^4.9.2",
    "webpack-dev-server": "^4.7.4",
    "webpack-merge": "^5.8.0"
  }
}


*********************************

npm init -y
npm install express --save

*********************************

index.js

*********************************

const express = require('express');
const path = require('path');

const app = express();
const staticFilesPath = path.resolve(__dirname, './public');
app.use('/', express.static(staticFilesPath));

const PORT = process.env.PORT || 8081;
app.listen(PORT, () => {
  console.log(`App running on http://localhost:${PORT}`);
});


*********************************

{
  "name": "server",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "node index.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "express": "^4.18.2"
  }
}


*********************************

git init
git remote add origin git@github.com...
git add .
git commit -m "initial commit"
git push -u origin main

*********************************

gh-pages

*********************************

https://github.com/heroku/heroku-buildpack-static.git

*********************************

npm install -g heroku

*********************************

heroku login

*********************************

static.json

*********************************

{
  "root": "./"
}


*********************************

git add .
git commit -m "add static files"
git push

*********************************

git clone https://git.heroku.com/<heroku-app-name>.git .

*********************************

git add .
git commit -m "add static files"
git push

*********************************

const express = require('express');
const path = require('path');

const app = express();
const staticFilesPath = path.resolve(__dirname, './public');
app.use('/', express.static(staticFilesPath));

const PORT = process.env.PORT || 8081;
app.listen(PORT, () => {
  console.log(`App running on http://localhost:${PORT}`);
});


*********************************

{
  "name": "server",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "node index.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "express": "^4.18.2"
  }
}


*********************************

const express = require("express");
const path = require("path");

const app = express();
const staticFilesPath = path.resolve(__dirname, "./public");
app.use("/", express.static(staticFilesPath));

app.use("/api/hello", async (req, res) => {
  res.send("Custom API endpoint");
});

const PORT = process.env.PORT || 8081;
app.listen(PORT, () => {
  console.log(`App running on http://localhost:${PORT}`);
});


*********************************

git add .
git commit -m "add nodejs + express server"
git push

*********************************
